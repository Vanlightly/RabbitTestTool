---
# detect skipping due to no matching hosts found issue
- name: Create a file to signal the playbook ran
  file:
    path: run_check
    state: touch

- name: set hostname
  hostname:
    name: "{{ hostname }}"

- name: Increase file descriptor limit for root
  pam_limits:
    domain: 'root'
    limit_type: '-'
    limit_item: nofile
    value: "{{ fd_limit }}"

- name: Increase file descriptor limit for ubuntu
  pam_limits:
    domain: 'ubuntu'
    limit_type: 'soft'
    limit_item: nofile
    value: "{{ fd_limit }}"

- name: Enable pam_limits.so
  lineinfile:
    path: /etc/pam.d/common-session
    insertafter: EOF
    line: 'session required pam_limits.so'

- name: Ensure the locale exists
  locale_gen:
    name: en_US.UTF-8
    state: present

- name: set as default locale
  command: update-locale LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

- name: create rabbitmq directory
  file: 
    path: /rabbitmq 
    state: directory 
    owner: ubuntu 
    group: ubuntu
  become: true

- name: create rabbitmq logs directory
  file: 
    path: /logs
    state: directory 
    owner: ubuntu 
    group: ubuntu
  become: true

- name: create rabbitmq data directory
  file: 
    path: /data
    state: directory 
    owner: ubuntu 
    group: ubuntu
  become: true

- name: create rabbitmq WAL directory
  file: 
    path: /wal
    state: directory 
    owner: ubuntu 
    group: ubuntu
  become: true

- name: Add RabbitMQ directories to /etc/environment
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^{{ item.key }}"
    line: "{{ item.key }}={{ item.value }}"
  with_items:
    - { key: "RABBITMQ_MNESIA_DIR", value: "/data" }
    - { key: "RABBITMQ_LOG_BASE", value: "/logs" }

- name: Reboot the machine with all defaults
  reboot:
    
- name: Update all packages
  apt:
    name: "*"
    state: latest
    update_cache: yes
    force_apt_get: true

- name: Get name of data volume
  shell: "lsblk | grep {{ data_volume_size_label }} | cut -d' ' -f1"
  register: data_volume_name

- name: Create a filesystem on EBS data volume
  filesystem:
    fstype: "{{ filesystem }}"
    dev: "/dev/{{ data_volume_name.stdout }}"

- name: Mount EBS data volume
  mount:
    path: /data
    src: "/dev/{{ data_volume_name.stdout }}"
    fstype: "{{ filesystem }}"
    state: mounted

- name: Get UUID of data volume
  shell: blkid -s UUID -o value $( df /data )
  register: data_uuid
  become: true

- name: Convert fstab device name to UUID format for data volume
  replace:
    dest=/etc/fstab
    regexp="/dev/{{ data_volume_name.stdout }}"
    replace="UUID={{data_uuid.stdout}}"
    backup=yes



- name: Get name of logs volume
  shell: "lsblk | grep {{ logs_volume_size_label }} | cut -d' ' -f1"
  register: logs_volume_name

- name: Create a filesystem on EBS logs volume
  filesystem:
    fstype: "{{ filesystem }}"
    dev: "/dev/{{ logs_volume_name.stdout }}"

- name: Mount EBS logs volume
  mount:
    path: /logs
    src: "/dev/{{ logs_volume_name.stdout }}"
    fstype: "{{ filesystem }}"
    state: mounted

- name: Get UUID of logs volume
  shell: blkid -s UUID -o value $( df /logs )
  register: logs_uuid
  become: true

- name: Convert fstab device name to UUID format for logs volume
  replace:
    dest=/etc/fstab
    regexp="/dev/{{ logs_volume_name.stdout }}"
    replace="UUID={{logs_uuid.stdout}}"
    backup=yes
  


- name: Get name of WAL volume
  shell: "lsblk | grep {{ wal_volume_size_label }} | cut -d' ' -f1"
  register: wal_volume_name

- name: Create a filesystem on EBS WAL volume
  filesystem:
    fstype: "{{ filesystem }}"
    dev: "/dev/{{ wal_volume_name.stdout }}"

- name: Mount EBS WAL volume
  mount:
    path: /wal
    src: "/dev/{{ wal_volume_name.stdout }}"
    fstype: "{{ filesystem }}"
    state: mounted

- name: Get UUID of WAL volume
  shell: blkid -s UUID -o value $( df /wal )
  register: wal_uuid
  become: true

- name: Convert fstab device name to UUID format for WAL volume
  replace:
    dest=/etc/fstab
    regexp="/dev/{{ wal_volume_name.stdout }}"
    replace="UUID={{wal_uuid.stdout}}"
    backup=yes